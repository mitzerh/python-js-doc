[{"file_path": "./sample/js-files", "file_name": "sample-2.js", "id": "db74bed4a3e83cde2a22e014360893fc", "docu": {"constructors": {"MultiFeedParser": {"__info__": {"name": "MultiFeedParser", "requires": ["jQuery", "A whole lotta understanding"], "params": [{"code": "@param", "type": "object", "name": "config", "sub_params": [{"code": "@param", "type": "object", "name": "config.feeds", "desc": "(required) Feed Information"}, {"code": "@param", "type": "boolean", "name": "config.logging", "desc": "(optional) enable/disable console logging (default is false)"}, {"code": "@param", "type": "boolean", "name": "config.initOnLoad", "desc": "(optional) when enabled, it will load the feeds on initialization; when disabled, you will have to call event.reload() to initiate (default is true)"}, {"code": "@param", "type": "integer", "name": "config.cacheTime", "desc": "(optional) define the browser cache buster in minutes (default is nothing)"}], "desc": "Configuration file"}], "ex": "", "scope": "public", "type": "constructor", "id": "cc49ccadf94d270883b07c037f4b696c", "desc": ""}, "event": {"__info__": {"name": "event", "requires": [], "parent_constructor": "MultiFeedParser", "params": [], "ex": "", "type": "namespace", "id": "9a95ef493b3d87ea297b54c977a55014", "desc": "Uses the Events constructor (see the constructor for details)"}}}, "Events": {"onLoad": {"name": "onLoad", "requires": [], "parent_constructor": "Events", "params": [], "ex": "Argument options: \n1. Simple: \nevent.onLoad(\"feed1\",function(data) { alert(data); }); \n2. Advanced: \nevent.onload({ type:\"feed1\", callback:function(data) { alert(data); });", "type": "function", "id": "e2489dc4548d0098e9a68c5f172e578e", "desc": "Bind a function to the onload event of a type \nDifferent from event.getData() - this will trigger on event.reload();"}, "addFeed": {"name": "addFeed", "requires": [], "parent_constructor": "Events", "params": [{"code": "@param", "type": "string", "name": "argument[0]", "desc": "feed type name"}, {"code": "@param", "type": "string", "name": "argument[1]", "desc": "url of the feed"}], "ex": "Argument options: \n1. Simple (using two {string} arguments) \nevent.addFeed(\"feed1\",\"http://foo.bar.com\"); \n2. Advanced (using an {object} argument) \nevent.addFeed({ type:\"feed1\", url:\"http://foo.bar.com\", refresh:60 });", "type": "function", "id": "be3f5fad55f091ea08892023291bc798", "desc": "Adds a feed after initialization of the script"}, "removeFeed": {"name": "removeFeed", "requires": [], "parent_constructor": "Events", "params": [{"code": "@param", "type": "string", "name": "type", "desc": "Type id of the feed; you can remove multiple feeds by splitting with spaces"}], "ex": "event.removeFeed(\"feed1\"); \nevent.removeFeed(\"feed1 feed2 feed3\");", "type": "function", "id": "fc51d8a5d43b46d16eb6f3d875ad2328", "desc": "Remove a feed and all its instances and dependencies"}, "reload": {"name": "reload", "requires": [], "parent_constructor": "Events", "params": [{"code": "@param", "type": "string", "name": "types", "desc": "(optional) feed type name/s; if defined, it will only load the specific ones; if undefined it will reload all types"}], "ex": "event.reload(); \nevent.reload(\"feed1\"); \nevent.reload(\"feed1 feed2\");", "type": "function", "id": "233528d9539670a107b59cdbe2b5d61d", "desc": "Reloads the feed types"}, "getData": {"name": "getData", "requires": [], "parent_constructor": "Events", "params": [], "ex": "Argument options: \n1. Simple: \nevent.getData(\"feed1\",function(data) { alert(data); }); \n2. Advanced: \nevent.getData({ type:\"feed1\", callback:function(data) { alert(data); });", "type": "function", "id": "f7282ce49b42dad8928d99428b0de10b", "desc": "Bind a function to get the latest type's data. \nDifferent from event.onLoad() - this will only trigger only when explicitly called"}, "__info__": {"name": "Events", "requires": [], "params": [], "ex": "", "scope": "private", "type": "constructor", "id": "3952e89079890555696e7d62d4ab871e", "desc": "All the accessible public event methods"}}}, "others": [{"name": "setRefreshRate", "requires": [], "params": [{"code": "@param", "type": "object", "name": "self", "desc": "Prototype of the feed instance"}, {"code": "@param", "type": "string", "name": "type", "desc": "Feed type name"}, {"code": "@param", "type": "object", "name": "info", "desc": "Config information of the type"}], "ex": "", "scope": "private", "type": "function", "id": "b9cfc5a84b583cfd94a316e7926f1ddb", "desc": "Refresh rate helper function \nSets the refresh rate in seconds"}, {"name": "loadFeed", "requires": [], "params": [{"code": "@param", "type": "object", "name": "vars", "desc": "Variables of the feed instance"}, {"code": "@param", "type": "string", "name": "type", "desc": "Feed type name"}], "ex": "", "scope": "private", "type": "function", "id": "979f1b4738bd98495df61df8aa986b2d", "desc": "Feed loader helper \nLoads the feed via jQuery.ajax()"}, {"name": "triggerStack", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "ca4dd14a5dd0c5db8a1d84b4dfdec412", "desc": "Function Stack trigger helper \nRuns the stack of functions"}, {"name": "setLoaderArgs", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "a844d46b68c3c619d72e504773eb0178", "desc": "Loader Arguments helper \ncommon arguments parser for event.getData and event.onLoad"}, {"name": "getNormalizationFN", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "f1d2c86bcb3d6a2594df141c6c4c664f", "desc": "Normalization function helper \nChecks to see if there is a normalization function to a feed type"}, {"name": "useJSONPCallback", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "a0ba4d2be9e6c7adcb38dae95ff01413", "desc": "JSONP callback helper \nChecks whether to use option1 or option2 callback parameters"}, {"name": "inDataType", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "490ed48bc13b008bf7d8effa935df6c4", "desc": "Ajax types helper \nChecks whether the ajax data type is supported"}, {"name": "getJSONP", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "aad3aeff533aece903a8380a8e93fe8c", "desc": "JSONP callback helper \nGets the jsonp callback parameter from the url"}]}}, {"file_path": "./sample/js-files", "file_name": "sample.js", "id": "ca3c21a88d408713a495aaf3ab93e4a0", "docu": {"overview": {"type": "overview", "name": "here", "desc": "This is a description of what this file is"}, "constructors": {"Sample": {"bar": {"fooTwo": {"name": "fooTwo", "requires": [], "parent_constructor": "Sample.bar", "params": [], "ex": "", "type": "function", "id": "f2c3680baaf9753f899d4cd32ff77d36", "desc": "fooTwo Foo two, @memberOf part of the function name"}, "foobage": {"name": "foobage", "requires": [], "parent_constructor": "Sample.bar", "params": [], "ex": "", "type": "function", "id": "25ed011f5f7df5c85fde1396476f7439", "desc": "\"Foo beige\""}, "third_level": {"fourth_level": {"__info__": {"name": "fourth_level", "requires": [], "parent_constructor": "Sample.bar.third_level", "params": [], "ex": "", "type": "constructor", "id": "944ef77a1162b442faa839a88b996072", "desc": "OMG 4th leva!!!"}, "some_function": {"name": "some_function", "requires": [], "parent_constructor": "Sample.bar.third_level.fourth_level", "params": [{"code": "@param", "type": "string", "name": "holla", "desc": ""}], "ex": "", "type": "function", "id": "31b1a2130543ef2d11d1595a24415887", "desc": "Do you really go this deep?"}}, "__info__": {"name": "third_level", "requires": [], "parent_constructor": "Sample.bar", "params": [], "ex": "", "type": "constructor", "id": "eb4ab2b83b05ed6a6d16caddf3b67910", "desc": "woah!"}, "anotha_leva": {"name": "anotha_leva", "requires": [], "parent_constructor": "Sample.bar.third_level", "params": [], "ex": "", "type": "function", "id": "3924d4e86e499593368a9544592ccc6d", "desc": "level 3!"}}, "__info__": {"name": "bar", "requires": [], "parent_constructor": "Sample", "params": [], "ex": "", "type": "namespace", "id": "51c7d80e6e39c0d672cb27c877b196e7", "desc": "\"Sample.bar\" is the same as having a @memberOf Sample"}}, "foo": {"name": "foo", "requires": [], "parent_constructor": "Sample", "params": [], "ex": "", "type": "function", "id": "19a66ce8f3086a1a4b82bc48d78b01a7", "desc": "sample foo"}, "__info__": {"name": "Sample", "requires": [], "params": [], "ex": "", "type": "constructor", "id": "784cf10629875fd83550a54442566ea7", "desc": "An example to build out a simple js doc"}}}, "others": [{"name": "rogue", "requires": [], "params": [], "ex": "", "scope": "private", "type": "function", "id": "40c3a12aaef7fd26b5cacd79a2afa9cf", "desc": "A rogue function"}]}}]